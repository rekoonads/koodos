generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  name      String?
  avatar    String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  articles Article[]
  comments Comment[]
  likes    Like[]

  @@map("users")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  color       String    @default("#ef4444")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  articles Article[]

  @@map("categories")
}

model Article {
  id          String      @id @default(cuid())
  title       String
  slug        String      @unique
  content     String
  excerpt     String?
  image       String?
  status      Status      @default(DRAFT)
  type        ArticleType @default(ARTICLE)
  featured    Boolean     @default(false)
  breaking    Boolean     @default(false)
  views       Int         @default(0)
  readTime    String?
  publishedAt DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  authorId   String
  author     User     @relation(fields: [authorId], references: [id])
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  tags     Tag[]
  comments Comment[]
  likes    Like[]
  media    Media[]

  // Review specific fields
  rating   Int?
  pros     String?
  cons     String?
  verdict  String?

  // Gaming specific fields
  platform    String?
  specs       String? // JSON string
  gameInfo    String? // JSON string
  developer   String?
  publisher   String?
  releaseDate DateTime?
  genre       String?

  @@map("articles")
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())

  articles Article[]

  @@map("tags")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId  String
  author    User    @relation(fields: [authorId], references: [id])
  articleId String
  article   Article @relation(fields: [articleId], references: [id])

  @@map("comments")
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  userId    String
  user      User    @relation(fields: [userId], references: [id])
  articleId String
  article   Article @relation(fields: [articleId], references: [id])

  @@unique([userId, articleId])
  @@map("likes")
}

model Media {
  id        String    @id @default(cuid())
  url       String
  type      MediaType
  alt       String?
  caption   String?
  createdAt DateTime  @default(now())

  articleId String
  article   Article @relation(fields: [articleId], references: [id])

  @@map("media")
}

enum Role {
  USER
  ADMIN
  EDITOR
}

enum Status {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ArticleType {
  ARTICLE
  NEWS
  REVIEW
  GAMING
  TECH
  ANIME
  COMICS
  VIDEO
  GUIDE
  FEATURE
  INTERVIEW
  OPINION
  LIST
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
}